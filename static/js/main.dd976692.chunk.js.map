{"version":3,"sources":["components/SpotifyApi.js","App.js","serviceWorker.js","index.js","components/Search.js","components/Song.js","components/ArtistList.js","components/FesData.js"],"names":["SpotifyApi","props","useState","songs","setSongs","useEffect","request","require","authOptions","url","headers","Buffer","client_id","toString","form","grant_type","json","post","error","response","body","statusCode","token","access_token","options","searchArtistName","get","spotifyArtistId","undefined","artists","items","id","tracks","getSpotifyArtistInfo","console","log","className","length","map","song","index","key","rank","songName","name","image","album","images","audio","preview_url","spotifyLink","external_urls","spotify","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message","Search","search","setSearch","query","setQuery","onSubmit","e","preventDefault","type","placeholder","value","onChange","target","getArtistName","textContent","Song","src","alt","controls","preload","onPlay","querySelector","volume","href","rel","ArtistList","artistsNames","artistName","onClick","FesData","firstDayArtists","setFirstDayArtists","secondDayArtists","setSecondDayArtists","thirdDayArtists","setThirdArtists","fourthDayArtists","setFourthDayArtists","createElementFromHTML","html","tempEl","createElement","innerHTML","querySelectorAll","a","fetch","proxyUrl","text","data","fullDaysArtistsNode","firstDayArtistsNode","node","secondDayArtistsNode","thirdDayArtistsNode","fourthDayArtistsNode","getArtistsList","collapseArtistList","nextElementSibling","style","display"],"mappings":"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","file":"static/js/main.dd976692.chunk.js","sourcesContent":["/**\n * This is an example of a basic node.js script that performs\n * the Client Credentials oAuth2 flow to authenticate against\n * the Spotify Accounts.\n *\n * For more information, read\n * https://developer.spotify.com/web-api/authorization-guide/#client_credentials_flow\n */\nimport React, { useState, useEffect } from 'react'\nimport { Song } from './index';\n\nconst SpotifyApi = (props) => {\n\n  const [songs, setSongs] = useState([\"empty\"]);\n\n  useEffect(() => {\n    const client_id = process.env.REACT_APP_SPOTIFY_API_ID; // Your client id\n    const client_secret = process.env.REACT_APP_SPOTIFY_API_KEY; // Your secret\n\n    const getSpotifyArtistInfo = () => {\n      const request = require('request'); // \"Request\" library\n\n      // your application requests authorization\n      const authOptions = {\n        url: 'https://accounts.spotify.com/api/token',\n        headers: {\n          'Authorization': 'Basic ' + (new Buffer(client_id + ':' + client_secret).toString('base64'))\n        },\n        form: {\n          grant_type: 'client_credentials'\n        },\n        json: true\n      };\n\n      request.post(authOptions, function (error, response, body) {\n        if (!error && response.statusCode === 200) {\n          // use the access token to access the Spotify Web API\n          const token = body.access_token;\n          const options = {\n            url: `https://api.spotify.com/v1/search?q=${props.searchArtistName}&type=artist&market=JP`,\n            headers: {\n              'Authorization': 'Bearer ' + token\n            },\n            json: true\n          };\n\n          request.get(options, function (error, response, body) {\n            let spotifyArtistId;\n            // Spotifyで検索できないバンドのバグ回避\n            if (body.artists.items[0] === undefined) {\n              spotifyArtistId = \"\"\n            } else {\n              spotifyArtistId = body.artists.items[0].id\n            };\n            // 似た名前が検索されるバグ回避\n            // if (spotifyArtistId === \"1SJOL9HJ08YOn92lFcYf8a\") {\n            //   spotifyArtistId = \"7xx0gYr6iMecpDbSynNzWF\" // SHANK\n            // }\n\n            request.post(authOptions, function (error, response, body) {\n              if (!error && response.statusCode === 200) {\n                // use the access token to access the Spotify Web API\n                const token = body.access_token;\n                const options = {\n                  url: `https://api.spotify.com/v1/artists/${spotifyArtistId}/top-tracks?country=JP`,\n                  headers: {\n                    'Authorization': 'Bearer ' + token\n                  },\n                  json: true\n                };\n\n                request.get(options, function (error, response, body) {\n                  setSongs(body.tracks)\n                });\n              }\n            });\n          });\n        }\n      });\n    }\n    getSpotifyArtistInfo();\n  }, [props.searchArtistName])\n\n  console.log(songs)\n\n  if (songs[0] === \"empty\") {\n    return \"\"\n  } else {\n    return (\n      <div className=\"songs\">\n        {(songs === undefined || songs.length === 0) //バンド名からバンドが取得できない場合\n          ? <p className=\"getArtistNameError\">バンドの取得に失敗しました。<br />このバンドはまだSpotifyに登録されていないかもしれません。<br />もしくは僕の実装の問題です。<br />ごめん！！</p>\n          // <a href={process.env.REACT_APP_TWITTER_URL} target=\"_blank\" rel=\"noopener noreferrer\">開発者まで</a>\n          : songs.map((song, index) => (\n            <Song\n              key={index}\n              rank={index}\n              songName={song.name}\n              image={song.album.images[1].url}\n              audio={song.preview_url}\n              spotifyLink={song.external_urls.spotify}\n            />\n          ))}\n      </div>\n    )\n  }\n}\n\nexport default SpotifyApi\n\n","import React from 'react'\nimport './styles/App.scss';\nimport './styles/reset.scss';\nimport { Search } from './components/index';\n\nconst App = () => {\n\n  return (\n    <div className=\"wrapper\">\n      <Search />\n    </div>\n  )\n}\n\nexport default App;\n\n\n  // const getSongs = () => {\n  //   request.post(authOptions, function (error, response, body) {\n  //     if (!error && response.statusCode === 200) {\n  //       // use the access token to access the Spotify Web API\n  //       var token = body.access_token;\n  //       var options = {\n  //         url: `https://api.spotify.com/v1/artists/${spotifyArtistId}/top-tracks?country=JP`,\n  //         headers: {\n  //           'Authorization': 'Bearer ' + token\n  //         },\n  //         json: true\n  //       };\n\n  //       request.get(options, function (error, response, body) {\n  //         setSongs(body.tracks)\n  //         // console.log(songs)\n  //       });\n  //     }\n  //   });\n  // }\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { useState } from 'react';\nimport { SpotifyApi, FesData } from './index';\n\nconst Search = () => {\n  const [search, setSearch] = useState(\"サカナクション\");\n  const [query, setQuery] = useState(\"サカナクション\");\n\n  const updateSearch = (e) => {\n    setSearch(e.target.value)\n  }\n\n  const getSearch = (e) => {\n    e.preventDefault();\n    setQuery(search);\n  }\n  \n  const getArtistName = (e) => {\n    setSearch(e.target.textContent)\n    setQuery(e.target.textContent)\n  }\n  \n  return (\n    <>\n      <form className=\"search-form\" onSubmit={getSearch}>\n        <input className=\"search-bar\" type=\"text\" placeholder=\"バンド名\" value={search} onChange={updateSearch} />\n        <button className=\"search-button\" type=\"submit\">\n          検索\n        </button>\n      </form>\n      <div className=\"container\">\n        <div className=\"container__left\">\n          <FesData getArtistName={getArtistName} />\n        </div>\n        <div className=\"container__right\">\n          <SpotifyApi searchArtistName={query} />\n        </div>\n      </div>\n    </>\n  )\n}\n\nexport default Search\n\n","import React from 'react'\n\nconst Song = (props) => {\n\n  const adjustAudioVol = () => {\n    const audio = document.querySelector(\"audio\");\n    audio.volume = 0.1;\n  }\n  \n  return (\n    <div className=\"song\">\n      <h3 className=\"song__title\"><span>{props.rank + 1}位 </span><span>{props.songName}</span></h3>\n      <div className=\"song__image\">\n        <img src={props.image} alt=\"\" />\n      </div>\n      <div className=\"song__playerAndFullLink flex\">\n        {props.audio === null\n          ? <></>\n          : <audio controls preload=\"none\" name=\"media\" src={props.audio} type=\"audio/mpeg\" onPlay={adjustAudioVol}></audio>\n        }\n        <p><a className=\"song__fullSong\" href={props.spotifyLink} target=\"_blank\" rel=\"noopener noreferrer\">フルで聞く</a></p>\n      </div>\n    </div>\n  )\n}\n\nexport default Song\n\n","import React from 'react'\n\nconst ArtistList = (props) => {\n\n  return (\n    <>\n      {props.artistsNames === undefined ? <></> : props.artistsNames.map((artistName) => (\n        <li onClick={props.getArtistName} key={artistName}>{artistName}</li>\n      ))}\n    </>\n  )\n}\n\nexport default ArtistList\n\n","import React, { useState, useEffect } from 'react'\nimport { ArtistList } from './index'\n\nconst FesData = (props) => {\n  const [firstDayArtists, setFirstDayArtists] = useState()\n  const [secondDayArtists, setSecondDayArtists] = useState()\n  const [thirdDayArtists, setThirdArtists] = useState()\n  const [fourthDayArtists, setFourthDayArtists] = useState()\n\n  useEffect(() => {\n    const getArtistsList = async () => {\n      const proxyUrl = 'https://cors-anywhere--clone.herokuapp.com/'\n      const targetUrl = 'http://countdownjapan.jp/1920/lineup/artists/'\n      const response = await fetch(proxyUrl + targetUrl)\n      const data = await response.text()\n      const fullDaysArtistsNode = createElementFromHTML(data)\n\n      const firstDayArtistsNode = [...fullDaysArtistsNode[0].querySelectorAll(\".c-artist__title\")].map((node => node.textContent))\n      setFirstDayArtists(firstDayArtistsNode)\n      const secondDayArtistsNode = [...fullDaysArtistsNode[1].querySelectorAll(\".c-artist__title\")].map((node => node.textContent))\n      setSecondDayArtists(secondDayArtistsNode)\n      const thirdDayArtistsNode = [...fullDaysArtistsNode[2].querySelectorAll(\".c-artist__title\")].map((node => node.textContent))\n      setThirdArtists(thirdDayArtistsNode)\n      const fourthDayArtistsNode = [...fullDaysArtistsNode[3].querySelectorAll(\".c-artist__title\")].map((node => node.textContent))\n      setFourthDayArtists(fourthDayArtistsNode)\n      // .catch(() => console.log(\"Can’t access \" + targetUrl + \" response. Balocked by browser?\"))\n    };\n    getArtistsList();\n  }, [])\n\n  // getArtistsListで作ったtextをElementに変更\n  function createElementFromHTML(html) {\n    const tempEl = document.createElement('div');\n    tempEl.innerHTML = html;\n    const lineupContents = tempEl.querySelectorAll(\".c-lineup-content\")\n    return lineupContents\n  }\n\n  const collapseArtistList = (e) => {\n    e.target.nextElementSibling.style.display = e.target.nextElementSibling.style.display === 'none' ? 'block' : 'none';\n  }\n\n  return (\n    <ul>\n      <li className=\"year\">2019</li>\n      <ul>\n        <li className=\"fesName\">CDJ</li>\n        <ul>\n          <li className=\"date\" onClick={collapseArtistList}>12/28</li>\n          <ul className=\"artistList\" style={{ display: \"none\" }}>\n            <ArtistList artistsNames={firstDayArtists} getArtistName={props.getArtistName} />\n          </ul>\n          <li className=\"date\" onClick={collapseArtistList}>12/29</li>\n          <ul className=\"artistList\" style={{ display: \"none\" }}>\n            <ArtistList artistsNames={secondDayArtists} getArtistName={props.getArtistName} />\n          </ul>\n          <li className=\"date\" onClick={collapseArtistList}>12/30</li>\n          <ul className=\"artistList\" style={{ display: \"none\" }}>\n            <ArtistList artistsNames={thirdDayArtists} getArtistName={props.getArtistName} />\n          </ul>\n          <li className=\"date\" onClick={collapseArtistList}>12/31</li>\n          <ul className=\"artistList\" style={{ display: \"none\" }}>\n            <ArtistList artistsNames={fourthDayArtists} getArtistName={props.getArtistName} />\n          </ul>\n        </ul>\n        <li className=\"fesName\">RIJF</li>\n      </ul>\n    </ul>\n  )\n}\n\nexport default FesData\n\n"],"sourceRoot":""}